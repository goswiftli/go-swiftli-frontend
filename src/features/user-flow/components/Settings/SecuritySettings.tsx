import { Box, Button, Image, Stack, Text, useDisclosure } from '@chakra-ui/react';
import { useFormik } from 'formik';
import { useState } from 'react';
import * as yup from 'yup';

import qrImg from '@/assets/images/qrCode.png';
import { FormInput } from '@/components';
import { useAppSelector } from '@/redux';

const validationSchema = yup.object().shape({
  authCode: yup.string().min(6).max(6).required().label('Authentication code'),
});

export const useSecuritySettings = () => {
  const { authUser } = useAppSelector((state) => state.auth);
  const { isOpen: isOpenReset, onClose: onCloseReset, onOpen: onOpenReset } = useDisclosure();

  const qrKey = '4QQMQLKSZKY5LH5TLQ54VMGKX5L5LPXQ';
  const [twoFactorStep, setTwoFactorStep] = useState('step 0');
  const [isViewingKey, setIsViewingKey] = useState(false);

  const handleTwoFactorStep = (step: string) => {
    setTwoFactorStep(step);
  };

  const [passwordText, setPasswordText] = useState(
    'Reset your password regularly to keep your account secure'
  );
  const handleResetPassword = async () => {
    setPasswordText(
      `We've sent a password reset link to ${authUser.username ?? 'reynnolds@gmail.com'} `
    );
  };

  const formik = useFormik({
    initialValues: {
      authCode: '',
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      console.log(values);
    },
  });

  const handleSubmit = () => {
    formik.handleSubmit();
  };

  const ReturnTwoFactorSteps = () => {
    const stepsConfig = {
      'step 1': {
        nextStep: 'step 2',
        onClick: () => handleTwoFactorStep('step 2'),
      },
      'step 2': {
        nextStep: 'step 3',
        onClick: () => handleTwoFactorStep('step 3'),
      },
      'step 3': {
        nextStep: null,
        onClick: handleSubmit,
      },
    };

    if (twoFactorStep in stepsConfig) {
      const { onClick, nextStep } = stepsConfig[twoFactorStep as keyof typeof stepsConfig];

      return (
        <Stack spacing={8} alignItems="end">
          <Text
            color="blue.300"
            _hover={{ cursor: 'pointer' }}
            onClick={() => handleTwoFactorStep('step 0')}
          >
            Cancel
          </Text>
          <Button bgColor="blue.300" rounded="4px" size="sm" onClick={onClick}>
            {nextStep === null ? 'Submit' : 'Next'}
          </Button>
        </Stack>
      );
    }

    // Default: Setup entry point
    return (
      <Text
        color="blue.300"
        _hover={{ cursor: 'pointer' }}
        onClick={() => handleTwoFactorStep('step 1')}
      >
        Setup
      </Text>
    );
  };

  const TwoFactorSteps = () => {
    if (twoFactorStep === 'step 1') {
      return (
        <Stack fontFamily="body" fontSize="md">
          <Text color="black.800">1. Download an authenticator app</Text>
          <Text color="black.400">
            If you don’t have an authenticator app installed, please download one. We recommend
            using Google Authenticator or Microsoft Authenticator.
          </Text>
        </Stack>
      );
    }

    if (twoFactorStep === 'step 2') {
      return (
        <>
          <Text color="black.800">2. Scan the QR code</Text>
          <Stack alignItems="center">
            {isViewingKey ? (
              <Text fontFamily="body" fontSize="sm" pt={12} color="black.800">
                {qrKey}
              </Text>
            ) : (
              <Image src={qrImg} bgSize="contain" boxSize="150px" />
            )}
            <Button
              size="sm"
              rounded="4px"
              variant="outline-2"
              onClick={() => setIsViewingKey((prev) => !prev)}
            >
              {isViewingKey ? 'View QR code' : 'View key'}
            </Button>
            <Text
              textAlign="center"
              fontFamily="body"
              fontSize="xs"
              fontWeight="light"
              color="black.400"
              maxW="50%"
              whiteSpace="normal"
            >
              Use your authenticator app to scan the barcode/QR code below. Alternatively, you can
              click “view key” and then copy and paste the code into your authenticator app.
            </Text>
          </Stack>
        </>
      );
    }

    if (twoFactorStep === 'step 3') {
      return (
        <Stack>
          <Text color="black.800">3. Enter your 6-digit code</Text>
          <FormInput
            label="Authentication code"
            name="authCode"
            value={formik.values.authCode}
            isInvalid={formik.touched.authCode && Boolean(formik.errors.authCode)}
            onChange={formik.handleChange}
            errorMessage={formik.touched.authCode && formik.errors.authCode}
            helperText="Enter the 6-digit code generated by your authenticator app."
          />
        </Stack>
      );
    }

    return (
      <Box fontFamily="body" fontSize="md">
        <Text color="black.300" fontWeight="light">
          Two-Factor Authentication
        </Text>
        <Text color="black.800">
          Increase the security of your account by setting up two-factor authentication
        </Text>
      </Box>
    );
  };

  const securitySettings = [
    {
      name: (
        <Box fontFamily="body" fontSize="md">
          <Text color="black.300" fontWeight="light">
            Change Password
          </Text>
          <Text color="black.800">{passwordText}</Text>
        </Box>
      ),
      value: isOpenReset ? (
        <Stack spacing={8} alignItems="end">
          <Text color="blue.300" _hover={{ cursor: 'pointer' }} onClick={onCloseReset}>
            Cancel
          </Text>
          <Button bgColor="blue.300" rounded="4px" size="sm" onClick={handleResetPassword}>
            Send email
          </Button>
        </Stack>
      ) : (
        <Text color="blue.300" _hover={{ cursor: 'pointer' }} onClick={onOpenReset}>
          Reset
        </Text>
      ),
    },
    {
      name: <TwoFactorSteps />,
      value: <ReturnTwoFactorSteps />,
    },
    {
      name: (
        <Box fontFamily="body" fontSize="md">
          <Text color="black.300" fontWeight="light">
            Active sessions
          </Text>
          <Text color="black.800">You're now signed in on all other devices. </Text>
        </Box>
      ),
      value: (
        <Text color="blue.300" _hover={{ cursor: 'pointer' }} onClick={onOpenReset}>
          Sign in
        </Text>
      ),
    },
    {
      name: (
        <Box fontFamily="body" fontSize="md">
          <Text color="black.300" fontWeight="light">
            Delete Account
          </Text>
          <Text color="black.800">Permanently delete your Ajebonext.com account</Text>
        </Box>
      ),
      value: (
        <Text color="blue.300" _hover={{ cursor: 'pointer' }} onClick={onOpenReset}>
          Delete Account
        </Text>
      ),
    },
  ];
  return { securitySettings };
};
